<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jose Armesto&#39;s Blog</title>
    <link>http://blog.armesto.net/categories/opinion/index.xml</link>
    <description>Recent content on Jose Armesto&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [PPOffice](http://github.com/ppoffice).</copyright>
    <atom:link href="http://blog.armesto.net/categories/opinion/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Codemotion 2016</title>
      <link>http://blog.armesto.net/codemotion-2016/</link>
      <pubDate>Wed, 30 Nov 2016 20:48:31 +0000</pubDate>
      
      <guid>http://blog.armesto.net/codemotion-2016/</guid>
      <description>&lt;p&gt;Ya s√© que voy un poco tarde con el post hablando sobre c√≥mo fue la Codemotion 2016, pero ten√≠a ganas de compartir mi experiencia en la conferencia.&lt;/p&gt;

&lt;p&gt;Vaya por delante que es dificil√≠simo organizar una conferencia a nivel nacional, y que hacerlo durante varios a√±os seguidos, tiene mucho m√©rito. Pero tambi√©n es importante compartir aquellas cosas que son mejorables para, entre todos, conseguir eventos de mejor calidad en nuestro pa√≠s. As√≠ que sin m√°s dilaci√≥n, compartir√© con vosotros mi experiencia en la Codemotion 2016, tanto desde el punto de vista de asistente, como desde el punto de vista de ponente.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;como-asistente&#34;&gt;Como asistente&lt;/h2&gt;

&lt;h3 id=&#34;n√∫mero-de-asistentes&#34;&gt;N√∫mero de asistentes&lt;/h3&gt;

&lt;p&gt;No vamos a andarnos por las ramas e iremos directos al que, para mi, es el principal problema de esta conferencia: el n√∫mero de asistentes. Organizar una conferencia es dif√≠cil, pero organizar una de 1000 o 2000 asistentes es complicad√≠simo. A pesar de que me ya me hab√≠an avisado de a√±os anteriores, el a√±o pasado decid√≠ asistir a la Codemotion por primera vez, y me encontr√© de lleno con el pastel. Colas largu√≠simas para asistir a charlas y talleres; gente de pie viendo las charlas; talleres pr√°cticos de 100 personas&amp;#8230; &lt;strong&gt;Masificaci√≥n&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Este a√±o, la organizaci√≥n pidi√≥ a los asistentes que votasen las charlas para poder preveer un poco la asistencia de cada una, pero no creo que mucha gente haya votado. Adem√°s, salvo el aula magna de la universidad, el resto de aulas donde hab√≠a charlas apenas pod√≠an acoger un 10% de la asistencia al evento, lo que hac√≠a imposible acoger tanta gente. El hecho de tener muchos tracks en paralelo no da v√≠a libre para recibir 2000 personas.&lt;/p&gt;

&lt;p&gt;En mi caso, como iba con conocimiento de causa del a√±o pasado, me qued√© a la mayor√≠a de las charlas del aula magna. Solo me atrev√≠a a ir a otra aula cuando la charla era despu√©s de un par√≥n, o despu√©s de comer. Haciendo esto solo tuve que ver una charla sentado en el suelo, y hacer cola durante 10-15 mins para la charla de &lt;a href=&#34;https://twitter.com/carlosble&#34;&gt;Carlos Bl√©&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La soluci√≥n propuesta ser√≠a hacer una conferencia de menos asistentes. Entiendo que tener el t√≠tulo de &amp;#8220;Conferencia m√°s grande de Espa√±a&amp;#8221;, y poder decir a patrocinadores que tantos miles de programadores asisten al evento es tentador, pero hacen la experiencia much√≠simo peor para los que asisten.&lt;/p&gt;

&lt;p&gt;Por ejemplo, &lt;a href=&#34;https://twitter.com/fiunchinho/status/799960255279013888&#34;&gt;hubo una falta de respeto generalizada hacia los ponentes y los asistentes&lt;/a&gt; interesados en la ronda de preguntas de cada charla. Al haber espacio tan limitado, la gente prefiere levantarse para coger sitio en la siguiente que esperarse a terminar la sesi√≥n de preguntas, haciendo que el ponente apenas pueda responder, y la gente no se entere bien de qu√© est√° ocurriendo. Una pena.&lt;/p&gt;

&lt;h3 id=&#34;lugar-del-evento&#34;&gt;Lugar del evento&lt;/h3&gt;

&lt;p&gt;El otro gran fallo del evento en mi opini√≥n es el lugar del mismo. La universidad donde se celebra est√° demasiado lejos de&amp;#8230; bueno, de todo. La organizaci√≥n intent√≥ mejorar esto poniendo un servicio gratuito de autobuses desde plaza de Espa√±a, lo cual es un buen detalle, aunque insuficiente. El autobus era solo a ciertas horas, y los que venimos de fuera, muchas veces llegamos m√°s tarde de lo habitual a Madrid, o tenemos que irnos antes de que termine el evento, as√≠ que no podemos utilizar esos autobuses.&lt;/p&gt;

&lt;p&gt;El tema autobuses tambi√©n es mejorable. No se especificaba en donde exactamente paraba el autob√∫s, y los que somos de fuera agradecer√≠amos unas mejores indicaciones. Adem√°s, el segundo d√≠a fui a coger el autobus de las 9:30 para ir a la conferencia, y, o sali√≥ con mucha antelaci√≥n, o &lt;strong&gt;ese d√≠a no hubo autob√∫s&lt;/strong&gt;. Envi√© &lt;a href=&#34;https://twitter.com/fiunchinho/status/799893331136352256&#34;&gt;un tweet a la organizaci√≥n&lt;/a&gt; mientras esper√°bamos por el autob√∫s yo y otras personas, pero &lt;strong&gt;nadie contest√≥&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Una mejora ser√≠a que alguien de la organizaci√≥n fuese siempre en los pocos autobuses que hay. Aunque sigo pensando que la mejor soluci√≥n ser√≠a buscar un sitio m√°s cercano. Preferir√≠a pagar un poco m√°s y no tener que ir a Mordor a ver las charlas.&lt;/p&gt;

&lt;h3 id=&#34;comida&#34;&gt;Comida&lt;/h3&gt;

&lt;p&gt;Creo que la comida fue algo muy positivo, con muchas opciones distintas. Como todo lo dem√°s est√° influido por el n√∫mero de asistentes, pero me pareci√≥ bien solucionado.&lt;/p&gt;

&lt;p&gt;Ech√© en falta que el s√°bado no hubiese una fuente de caf√©/comida, ya que la cafeter√≠a de la universidad estaba cerrada, y no hay nada en kil√≥metros a la redonda.&lt;/p&gt;

&lt;h3 id=&#34;acreditaci√≥n&#34;&gt;Acreditaci√≥n&lt;/h3&gt;

&lt;p&gt;Como el a√±o pasado, nadie controla qui√©n entra en la conferencia. Sobretodo porque el viernes compartimos recinto con los universitarios.&lt;/p&gt;

&lt;h2 id=&#34;como-ponente&#34;&gt;Como ponente&lt;/h2&gt;

&lt;p&gt;Antes de nada dar las gracias a las comunidades que votaron las charlas y me permitieron compartir cosas como ponente. Un honor y un placer.&lt;/p&gt;

&lt;p&gt;Tambi√©n decir que nadie me obliga a dar una charla. Es algo que hago porque yo quiero.&lt;/p&gt;

&lt;p&gt;Dicho lo cual, otras conferencias mucho m√°s peque√±as y modestas pagan viaje, o estancia, o ambas para los pontentes, sobretodo si vienen de fuera. No digo que en esta se tenga que pagar todo, pero el taxi para llegar o irse de la conferencia, hubiese ayudado mucho.&lt;/p&gt;

&lt;p&gt;Mi charla era la segunda del d√≠a, despu√©s de &lt;a href=&#34;https://twitter.com/kinisoftware&#34;&gt;@kinisoftware&lt;/a&gt;, as√≠ que estuve repas√°ndola, y antes de que terminase la anterior, ya estaba en la sala para poder preparar todo con calma. Al rato de estar ya sobre el escenario, se acerc√≥ alguien con un pen drive para que le pases las diapositivas. El pen drive no funcionaba en mi mac, no s√© por qu√©, as√≠ que como me sugiri√≥ el propio¬†&lt;a href=&#34;https://twitter.com/kinisoftware&#34;&gt;@kinisoftware&lt;/a&gt; sub√≠ la presentaci√≥n al Google Drive que la organizaci√≥n puso a disposici√≥n de los ponentes para subir las charlas. Cuando volvi√≥ la persona de las diapositivas le dije que ya estaba subida la presentaci√≥n al Drive, y me dijo que &lt;strong&gt;no sab√≠a de ning√∫n Google Drive&lt;/strong&gt;. Supongo que no era de la organizaci√≥n, si no de la empresa que grababa las charlas.&lt;/p&gt;

&lt;p&gt;Un poco descolocado, y como soy un t√≠o con recursos, record√© que tra√≠a las slides en mi propio pen drive, as√≠ que le dije que se llevase el m√≠o.&lt;/p&gt;

&lt;p&gt;Y esa fue la √∫ltima vez que vi a alguien no-asistente interesarse por la charla. Nadie vino a ayudarme a configurar nada. Al poco de empezar la charla tuve problemas de sonido con un v√≠deo, y &lt;strong&gt;absolutamente nadie ni de la organizaci√≥n ni de la gente del streaming se acerc√≥ a interesarse&lt;/strong&gt;. Superando las dificultades t√©cnicas como pod√≠a, segu√≠ con la charla hasta que llegando a la parte final, mi micr√≥fono deja de funcionar. No veo que ocurra nada, y al poco vuelve a funcionar. Sigo hablando pero ya entiendo qu√© estaba pasando: alguien de la organizaci√≥n se acerca por fin, pero para decirme que &lt;strong&gt;el tiempo de la charla se hab√≠a terminado&lt;/strong&gt;. En otras conferencias en las que he estado, te van avisando cuando quedan 10 o 5 minutos, para que sepas que el tiempo se acaba. Aqu√≠ el aviso parece que era cortar el micro cuando se acabase el tiempo.&lt;/p&gt;

&lt;p&gt;Como pude, pas√© las diapositivas r√°pidamente para al menos mencionarlas y terminar finalmente la charla. Una pena.&lt;/p&gt;

&lt;p&gt;Al acabar tampoco volv√≠ a ver a nadie de la organizaci√≥n. Ah! Ni tampoco a mi pen drive (a pesar de ir a pedirlo üôÅ&lt;/p&gt;

&lt;h2 id=&#34;conclusiones&#34;&gt;Conclusiones&lt;/h2&gt;

&lt;p&gt;Fue un placer hablar con amigos y compa√±eros de profesi√≥n a los que solo veo en conferencias como &lt;a href=&#34;https://twitter.com/carlosble&#34;&gt;Carlos Bl√©&lt;/a&gt;, y desvirtualizar a ilustres como &lt;a href=&#34;https://twitter.com/flopezluis&#34;&gt;F√©lix L√≥pez&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/agonzalezro&#34;&gt;√Ålex Gonz√°lez&lt;/a&gt; o &lt;a href=&#34;https://twitter.com/kinisoftware&#34;&gt;Kini&lt;/a&gt;, entre otros.&lt;/p&gt;

&lt;p&gt;Pero eso podr√≠a hacerlo en otras conferencias. As√≠ que el a√±o que viene me tomar√© un descanso de la Codemotion, e invertir√© ese tiempo y dinero en ver a esos &lt;em&gt;camaradas del metal&lt;/em&gt; en otro sarao.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mis impresiones sobre el debate #isTDDDead</title>
      <link>http://blog.armesto.net/mis-impresiones-sobre-el-debate-istdddead/</link>
      <pubDate>Fri, 23 May 2014 20:35:44 +0000</pubDate>
      
      <guid>http://blog.armesto.net/mis-impresiones-sobre-el-debate-istdddead/</guid>
      <description>&lt;p&gt;El &lt;a title=&#34;Yo no soy DHH. Long live TDD&#34; href=&#34;http://blog.armesto.net/yo-no-soy-dhh-long-live-tdd/&#34; target=&#34;_blank&#34;&gt;debate sobre si TDD est√° muerto&lt;/a&gt; o no sigue &lt;em&gt;vivito y coleando&lt;/em&gt;, y tras una guerra fr√≠a de art√≠culos por ambas partes, ahora el intercambio de opiniones se ha pasado a un formato de &lt;a title=&#34;isTDDDead&#34; href=&#34;http://martinfowler.com/articles/is-tdd-dead/&#34; target=&#34;_blank&#34;&gt;v√≠deo debate&lt;/a&gt; donde Martin Fowler, Kent Beck y el mism√≠simo¬†David Heinemeier Hansson hablan sobre el tema.&lt;/p&gt;

&lt;p&gt;La verdad es que cuando anunciaron que Kent Beck iba a enfrentarse a¬†David Heinemeier sobre el tema TDD, me alegr√© bastante por ver a gente tan buena en esto que hacemos debatiendo sobre distintas metodolog√≠as. &amp;#8220;&lt;em&gt;Seguro que aprendo de ambas partes&lt;/em&gt;&amp;#8220;, pensaba yo.&lt;/p&gt;

&lt;p&gt;Ingenuo de m√≠.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Tres &lt;em&gt;hangouts&lt;/em&gt; despues, la idea general que para m√≠ resume el debate es que DHH dice que TDD puede desencadenar en mal c√≥digo. El problema fundamental que tiene su argumento es que esto no es exclusivo de TDD. Hacer TDD te puede llevar a un mal c√≥digo¬†de la misma manera que utilizar mal cualquier otra herramienta podr√≠a llevarnos por el mal camino.&lt;/p&gt;

&lt;h2 id=&#34;tests-como-herramientas-de-dise√±o&#34;&gt;Tests como herramientas de dise√±o&lt;/h2&gt;

&lt;p&gt;A veces parece que lo que no le gusta de TDD y de los tests unitarios, es que a diferencia de los tests de sistema que √©l prefiere, los unitarios son tests que no te ocultan los problemas que tiene tu c√≥digo. &lt;strong&gt;No puedes crear un tests en aislamiento cuando tu clase tiene mil dependencias y no cumples cosas como la ley de Demeter o los principios SOLID&lt;/strong&gt;. Sin embargo, los tests de sistema no se quejar√°n en absoluto. No son nada exigentes en ese sentido. A cambio, ¬øqu√© pierdes? Pierdes feedback instant√°neo sobre c√≥mo de bien (o mal) est√°s dise√±ando algo. Pierdes velocidad en los tests que pasan de segundos a minutos.&lt;/p&gt;

&lt;p&gt;Eligiendo el camino de los tests de sistema puede dar la impresi√≥n de que vamos m√°s r√°pido porque tenemos que pensar menos los tests, pero lo que realmente estamos haciendo es &lt;strong&gt;esconder el polvo debajo de la alfombra&lt;/strong&gt;. El problema es que llegar√° un d√≠a que la alfombra no ser√° suficiente, y cuando nos queramos dar cuenta, &lt;strong&gt;las termitas han tomado el lugar&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;arquitectura-hexagonal&#34;&gt;Arquitectura Hexagonal&lt;/h2&gt;

&lt;p&gt;Otro argumento que me choc√≥ de DHH, que menciona en el segundo &lt;em&gt;hangout&lt;/em&gt;, es ese que dice que TDD penaliza el dise√±o porque tiendes a cosas como la arquitectura hexagonal. Para empezar, no entiendo qu√© relaci√≥n tiene una cosa con la otra. Puedes hacer una arquitectura hexagonal sin hacer TDD y viceversa.&lt;/p&gt;

&lt;p&gt;Adem√°s, dice que elegimos utilizar arquitectura hexagonal porque nos ayuda a crear tests. Que el principal motivo de este tipo de arquitectura es el testing.&lt;/p&gt;

&lt;p&gt;En &lt;a title=&#34;Arquitectura Hexagonal&#34; href=&#34;https://www.youtube.com/watch?v=vX5PBaXopmg&#34; target=&#34;_blank&#34;&gt;mi charla sobre arquitectura hexagonal&lt;/a&gt;¬†(&lt;a title=&#34;Arquitectura Hexagonal&#34; href=&#34;https://speakerdeck.com/fiunchinho/hexagonal-architecture&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;), no se mencionan los tests hasta la slide n√∫mero 55 (son 60). Y lo que digo es que la facilidad de hacer tests con este tipo de arquitecturas, es un buen√≠simo efecto secundario que tendremos. Pero nunca se vende que sea el principal motivo. Cierto es que en &lt;a title=&#34;Hexagonal Architecture&#34; href=&#34;http://alistair.cockburn.us/Hexagonal+architecture&#34; target=&#34;_blank&#34;&gt;el art√≠culo original&lt;/a&gt; se hace m√°s hincapi√© en los tests, pero para m√≠ la principal ventaja es &lt;strong&gt;la independencia de herramientas&lt;/strong&gt;: frameworks, bases de datos, etc,. adem√°s de promocionar al dominio a un sitio m√°s visible y acorde a la importancia que tiene.&lt;/p&gt;

&lt;h2 id=&#34;conclusi√≥n&#34;&gt;Conclusi√≥n&lt;/h2&gt;

&lt;p&gt;Me ver√© el √∫ltimo hangout, porque siempre se puede aprender algo de estas tres fieras, pero para mi, el debate no se ha llevado en ning√∫n momento por cauces interesantes. Prefiero no pensarlo, pero ya van varias personas que mencionan que DHH solo pretend√≠a hacer ruido. Espero que no fuese as√≠.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>El problema con el code coverage</title>
      <link>http://blog.armesto.net/el-problema-con-el-code-coverage/</link>
      <pubDate>Thu, 01 May 2014 13:27:28 +0000</pubDate>
      
      <guid>http://blog.armesto.net/el-problema-con-el-code-coverage/</guid>
      <description>&lt;p&gt;Me he permitido el lujo de &lt;a title=&#34;Considered harmful&#34; href=&#34;http://en.wikipedia.org/wiki/Considered_harmful&#34; target=&#34;_blank&#34;&gt;parafrasear a los maestros&lt;/a&gt; en el t√≠tulo de este art√≠culo para hablaros de un tema algo pol√©mico, por lo menos en los c√≠rculos en los que lo he hablado. Se trata de la necesidad de una alta cobertura de c√≥digo, o &lt;em&gt;code coverage&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;El tema me lo record√≥ una serie de tweets que intercambiamos el otro d√≠a algunos en Twitter, hablando sobre la importancia de tener una cobertura de c√≥digo del 100%. En el fondo todos est√°bamos de acuerdo en que no es importante tener un 100%, aunque no es la opini√≥n m√°s habitual que leer√°s por internet o escuchar√°s en empresas. Mi opini√≥n es que exigir cierto porcentaje de cobertura de c√≥digo no es que no aporte nada, &lt;strong&gt;sino que es algo perjudicial&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; width=&#34;550&#34;&gt;
  &lt;p&gt;
    .&lt;a href=&#34;https://twitter.com/SergiGP&#34;&gt;@SergiGP&lt;/a&gt; &lt;a href=&#34;https://twitter.com/theUniC&#34;&gt;@theUniC&lt;/a&gt; Tener un porcentaje alto de code coverage es una consecuencia, no un objetivo. No hay que olvidarlo nunca.
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; Jose Armesto (@fiunchinho) &lt;a href=&#34;https://twitter.com/fiunchinho/statuses/459038699079344128&#34;&gt;April 23, 2014&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;qu√©-es-la-cobertura-de-c√≥digo&#34;&gt;¬øQu√© es la cobertura de c√≥digo?&lt;/h2&gt;

&lt;p&gt;La cobertura de c√≥digo es una m√©trica que nos dice qu√© l√≠neas de nuestro c√≥digo ha sido ejecutado tras lanzar un test. De esta forma, yo puedo saber si hay partes de mi c√≥digo que no est√°n siendo testeadas. Este porcentaje se utiliza para medir la salud de un proyecto ya que si tiene un porcentaje bajo, podemos afirmar que hay muchas partes del c√≥digo de las que no podemos estar seguros de si funcionan o no.&lt;/p&gt;

&lt;p&gt;Una vez que sabemos qu√© es, la siguiente pregunta sale de forma natural.&lt;/p&gt;

&lt;h2 id=&#34;cuanta-cobertura-de-c√≥digo-es-necesaria&#34;&gt;¬øCuanta cobertura de c√≥digo es &lt;em&gt;necesaria&lt;/em&gt;?&lt;/h2&gt;

&lt;p&gt;N√≥tese el √©nfasis en la palabra &amp;#8220;necesaria&amp;#8221;. Y aqu√≠ es donde viene el problema. Muchos dir√°n que es una locura subir un c√≥digo a producci√≥n que no llegue al 80% de cobertura. Otros te dir√°n incluso que 90%. Y siempre encontrar√°s al fan√°tico que no programa ni el v√≠deo VHS y que dice que √©l no sube a producci√≥n nada que baje del 100%, porque es el porcentaje que obtiene al hacer siempre TDD.&lt;/p&gt;

&lt;p&gt;Mi problema con todo esto es que los tests son una &lt;strong&gt;herramienta de confianza&lt;/strong&gt;. Adem√°s de que me ayudan a &lt;a title=&#34;Yo no soy DHH. Long live TDD&#34; href=&#34;http://blog.armesto.net/yo-no-soy-dhh-long-live-tdd/&#34; target=&#34;_blank&#34;&gt;conseguir un mejor dise√±o haci√©ndome pensar en el problema antes de pensar en la soluci√≥n&lt;/a&gt;, me ayudan a detectar errores ejecut√°ndolos despu√©s de cada refactorizaci√≥n. Esto hace que yo tenga toda la seguridad del mundo en refactorizar c√≥digo: s√© que siempre puedo lanzar los tests y ver si he roto algo. Es mi red de seguridad, mi chivato de errores. Entonces, ¬øcuantos tests tengo que escribir? La respuesta es obvia: &lt;strong&gt;los tests necesarios para conseguir esa confianza&lt;/strong&gt;. Los necesarios para decir, si est√°n en verde es que todo est√° bien.&lt;/p&gt;

&lt;p&gt;¬øC√≥mo se mide esa confianza en un porcentaje de code coverage equivalente? &lt;strong&gt;No se puede&lt;/strong&gt;. No se puede porque depende del c√≥digo que est√©s haciendo. Si esa clase tiene un &lt;em&gt;getter&lt;/em&gt; que lo √∫nico que hace es devolver una propiedad y nada m√°s, no escribir√© un test para ese m√©todo. Si ese otro m√©todo es complejo y posiblemente cambiar√°, cr√©eme que lo testear√© concienzudamente. La mejor met√°fora que he visto sobre esto es la publicada en 2007, respondiendo a esta misma pregunta¬†&lt;a title=&#34;How much code coverage do you need?&#34; href=&#34;http://www.developertesting.com/archives/month200705/20070504-000425.html&#34; target=&#34;_blank&#34;&gt;How much test coverage do you need?&lt;/a&gt;:&lt;/p&gt;

&lt;div style=&#34;border-left: 5px solid #edece4&#34;&gt;
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;Early one morning, a programmer asked the great master:&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;‚ÄúI am ready to write some unit tests. What code coverage should I aim for?‚Äù&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;The great master replied:&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;‚ÄúDon‚Äôt worry about coverage, just write some good tests.‚Äù&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;The programmer smiled, bowed, and left.&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;&amp;#8230;&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;Later that day, a second programmer asked the same question.&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;The great master pointed at a pot of boiling water and said:&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;‚ÄúHow many grains of rice should put in that pot?‚Äù&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;The programmer, looking puzzled, replied:&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;‚ÄúHow can I possibly tell you? It depends on how many people you need to feed, how hungry they are, what other food you are serving, how much rice you have available, and so on.‚Äù&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;‚ÄúExactly,‚Äù said the great master.&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;The second programmer smiled, bowed, and left.&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;&amp;#8230;&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;Toward the end of the day, a third programmer came and asked the same question about code coverage.&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;‚ÄúEighty percent and no less!‚Äù Replied the master in a stern voice, pounding his fist on the table.&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;The third programmer smiled, bowed, and left.&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;&amp;#8230;&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;After this last reply, a young apprentice approached the great master:&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;‚ÄúGreat master, today I overheard you answer the same question about code coverage with three different answers. Why?‚Äù&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;The great master stood up from his chair:&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;‚ÄúCome get some fresh tea with me and let‚Äôs talk about it.‚Äù&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;After they filled their cups with smoking hot green tea, the great master began to answer:&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;‚ÄúThe first programmer is new and just getting started with testing. Right now he has a lot of code and no tests. He has a long way to go; focusing on code coverage at this time would be depressing and quite useless. He‚Äôs better off just getting used to writing and running some tests. He can worry about coverage later.‚Äù&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;‚ÄúThe second programmer, on the other hand, is quite experience both at programming and testing. When I replied by asking her how many grains of rice I should put in a pot, I helped her realize that the amount of testing necessary depends on a number of factors, and she knows those factors better than I do ‚Äì it‚Äôs her code after all. There is no single, simple, answer, and she‚Äôs smart enough to handle the truth and work with that.‚Äù&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;‚ÄúI see,‚Äù said the young apprentice, ‚Äúbut if there is no single simple answer, then why did you answer the third programmer ‚ÄòEighty percent and no less‚Äô?‚Äù&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;The great master laughed so hard and loud that his belly, evidence that he drank more than just green tea, flopped up and down.&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;‚ÄúThe third programmer wants only simple answers ‚Äì even when there are no simple answers ‚Ä¶ and then does not follow them anyway.‚Äù&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;em&gt;The young apprentice and the grizzled great master finished drinking their tea in contemplative silence.&lt;/em&gt;
  &lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;problem√°tica&#34;&gt;Problem√°tica&lt;/h2&gt;

&lt;p&gt;El problema de exigir un code coverage m√≠nimo a los programadores, de¬†proveer una respuesta simple a la pregunta, hace que el foco de los tests se centre en llegar a ese n√∫mero m√°gico que nos hemos sacado de la manga, cuando el foco deber√≠a estar orientado a pensar qu√© tests son realmente importantes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Una cobertura baja nos indica si un c√≥digo est√° mal testeado, pero una alta no nos dice que un c√≥digo est√© bien testeado. De la misma forma que un test en rojo nos dice que hay un error, pero uno en verde no nos asegura la ausencia de errores.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La motivaci√≥n para exigir un code coverage m√≠nimo creo que sale de &lt;a title=&#34;Ni hombres lobo ni balas de plata&#34; href=&#34;http://blog.armesto.net/ni-hombres-lobo-ni-balas-de-plata/&#34; target=&#34;_blank&#34;&gt;la necesidad de buscar respuesta a preguntas complejas&lt;/a&gt; del desarrollo de software. Centr√°ndonos en llegar al m√≠nimo de cobertura de c√≥digo, puede hacer que un comportamiento del programa se nos escape e introduzcamos un bug en el sistema, porque est√°bamos demasiado ocupados escribiendo tests sin valor para pasar por las l√≠neas que nos exig√≠an.&lt;/p&gt;

&lt;h2 id=&#34;conclusi√≥n&#34;&gt;Conclusi√≥n&lt;/h2&gt;

&lt;p&gt;Escribir tests es lo mejor que puedes hacer, y soy un gran defensor de utilizar TDD, pero como dijo Kent Beck en su &lt;a title=&#34;Kent Beck on code coverage&#34; href=&#34;http://stackoverflow.com/a/153565/563072&#34; target=&#34;_blank&#34;&gt;famos√≠sima respuesta de Stack Overflow&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Me pagan por escribir c√≥digo que funciona, no tests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tener una alta de cobertura no es un objetivo a tener, sino que es una consecuencia de haber pensado bien en el problema que estamos solventando y en los comportamientos que son interesantes para testear. Los que no lo sean, no tenemos por qu√© testearlos.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Yo no soy DHH. Long live TDD</title>
      <link>http://blog.armesto.net/yo-no-soy-dhh-long-live-tdd/</link>
      <pubDate>Thu, 24 Apr 2014 00:35:31 +0000</pubDate>
      
      <guid>http://blog.armesto.net/yo-no-soy-dhh-long-live-tdd/</guid>
      <description>&lt;p&gt;DHH es un gran programador, creador de algo como &lt;a title=&#34;Rails&#34; href=&#34;http://rubyonrails.org/&#34; target=&#34;_blank&#34;&gt;Rails&lt;/a&gt;, framework que quedar√° en la historia de la programaci√≥n web. Hoy, √©l, ha sido noticia por escribir &lt;a title=&#34;TDD is dead&#34; href=&#34;http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html&#34; target=&#34;_blank&#34;&gt;un post titulado &amp;#8220;TDD is dead&amp;#8221;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Quiz√° DHH est√° en lo cierto diciendo que TDD es algo que est√° muerto, que es momento de seguir hacia adelante y dejarlo atr√°s. Como cuando crecemos y dejamos de utilizar los &lt;a title=&#34;ruedines de bici&#34; href=&#34;http://1.bp.blogspot.com/_95Yb4E_y8Cs/S_HClbzs9YI/AAAAAAAADVs/iiwdG-vqq3Y/s1600/orbea-bicicleta-kids-atlantis-14.jpg&#34; target=&#34;_blank&#34;&gt;ruedines de la bicicleta&lt;/a&gt;: es algo para ni√±os peque√±os, pero de mayores ya no nos hacen falta. Quiz√° tiene raz√≥n.&lt;/p&gt;

&lt;p&gt;Si eres lo suficientemente experto, entonces quiz√° ya no tiene sentido. Porque para m√≠ TDD es eso: unos ruedines para programar que me ayudan a conseguir un mejor c√≥digo. Si fuese capaz de escribir el mejor c√≥digo posible a la primera, que siguiese los principios SOLID, que fuese auto explicativo, etc., entonces yo tampoco har√≠a TDD. ¬†&lt;strong&gt;¬øPara qu√© molestarme?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Si me saliese a la primera, no necesitar√≠a refactorizar muy frecuentemente y tener un unit testing que me avise cuando he roto algo. No me har√≠a falta ese loop de feedback tan corto.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;no-todos-somos-dhh&#34;&gt;No todos somos DHH&lt;/h2&gt;

&lt;p&gt;El problema es que poca gente tiene la capacidad de hacerlo as√≠ de bien siempre. Sobre todo porque normalmente programamos cosas que nunca antes hemos programado. Si estoy haciendo algo que ya hice con anterioridad, quiz√° no es tan importante seguir un TDD estricto. Ah√≠ tomar√© atajos.&lt;/p&gt;

&lt;p&gt;Pero si lo que estoy haciendo es completamente nuevo y no s√© por donde atacarlo, cr√©eme que har√© TDD sin dudarlo, &lt;strong&gt;siguiendo todos y cada uno de los pasos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Como la mayor√≠a de la gente no tiene esa capacidad que dec√≠a antes, la metedura de pata del post de DHH me parece may√∫scula. Me lo parece porque no solo dice que TDD no es para √©l, sino que anima a la gente a no utilizarlo, y deja entrever que har√° cambios en rails para animar a la gente a hacer menos unit testings y m√°s tests de otro tipo.&lt;/p&gt;

&lt;p&gt;Teniendo en cuenta su posici√≥n de lider en la comunidad, me parece una temeridad por su parte. Est√° invitando a la gente a que rompa algo tan establecido y aprobado como la &lt;a title=&#34;Testing Pyramid&#34; href=&#34;http://martinfowler.com/bliki/TestPyramid.html&#34; target=&#34;_blank&#34;&gt;pir√°mide de testing&lt;/a&gt;, bas√°ndose en que no han sido tests √∫tiles para testear aplicaciones basadas en rails. Un vistazo r√°pido a las charlas de las conferencias de Ruby de los √∫ltimos a√±os y vemos como hay un tema recurrente en todas ellas: &lt;a title=&#34;Deconstructing the framework&#34; href=&#34;https://www.youtube.com/watch?v=iUe6tacW3JE&#34; target=&#34;_blank&#34;&gt;c√≥mo escapar de Rails&lt;/a&gt;. Bien sea por hacer &lt;a title=&#34;Fast tests&#34; href=&#34;https://www.youtube.com/watch?v=bNn6M2vqxHE&#34; target=&#34;_blank&#34;&gt;tests m√°s r√°pidos&lt;/a&gt; y tener feedback antes; o porque los modelos de mi aplicaci√≥n no &lt;a title=&#34;ActiveRecord&#34; href=&#34;https://www.youtube.com/watch?v=yuh9COzp5vo&#34; target=&#34;_blank&#34;&gt;est√©n entre mezclados con el sistema de persistencia&lt;/a&gt;; o porque quiero tener a&lt;a title=&#34;Hexagonal Rails&#34; href=&#34;https://www.youtube.com/watch?v=CGN4RFkhH2M&#34; target=&#34;_blank&#34;&gt;rquitecturas que me permitan intercambiar componentes f√°cilmente&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Siempre lo que se busca es escapar de Rails, minimizar la dependencia con el framework. Los unit testings son costosos de hacer cuando el framework est√° en el medio. Por eso no le han sido √∫tiles: porque su framework no permit√≠a que lo fuesen. La soluci√≥n, obviamente, no es dejar de hacerlos, sino arreglar el framework.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; width=&#34;550&#34;&gt;
  &lt;p&gt;
    Sit-ups are dead. They don‚Äôt work when I eat all this sugar and take on all this severe stress. Long live gastric bypass surgery.
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; ‚òï J. B. Rainsberger (@jbrains) &lt;a href=&#34;https://twitter.com/jbrains/statuses/458983164502093824&#34;&gt;April 23, 2014&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;el-dogma&#34;&gt;El Dogma&lt;/h2&gt;

&lt;p&gt;De todas formas s√≠ que comparto con √©l una cosa, y es el nivel de dogma que TDD ha alcanzado en los √∫ltimos a√±os. Personas como Uncle Bob, cuando hablan de TDD, se ponen una sotana encima para predicar la palabra sagrada. Uncle Bob ha sido capaz de convertir la pr√°ctica de TDD en una religi√≥n.&lt;/p&gt;

&lt;div style=&#34;width: 213px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img alt=&#34;Uncle Bob, el predicador&#34; src=&#34;http://blogs.msdn.com/blogfiles/cdndevs/WindowsLiveWriter/CraftsmanshipandEthicsUncleBobsKeynote_E0E9/uncle_bob_martin_3.jpg&#34; width=&#34;203&#34; height=&#34;214&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Uncle Bob, el predicador de Texas
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Es una religi√≥n porque al igual que las religiones, el TDD de Uncle Bob promete la salvaci√≥n eterna si cumples con los mandamientos (&lt;a title=&#34;3 rules of TDD&#34; href=&#34;http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd&#34; target=&#34;_blank&#34;&gt;3 en el caso del TDD&lt;/a&gt;). Pero no solo eso, sino que tambi√©n asegura el castigo eterno para aquellos que no lo hagan. Eso es lo que hace cuando alude al poco profesionalismo de la gente que no lo practica. Est√° se√±alando a los herejes.&lt;/p&gt;

&lt;p&gt;En mi opini√≥n, &lt;strong&gt;hacer TDD es una herramienta m√°s&lt;/strong&gt;. Una herramienta casi imprescindible para mi, pero una herramienta al fin y al cabo. A alguien que utilizase el bloc de notas para programar le recomendar√≠a que probase Sublime o PHPStorm. Al igual que le recomendar√≠a TDD si no lo utiliza. En ambos casos creo que esa persona ser√° m√°s productiva y har√° mejor c√≥digo. Por tanto ser√° un programador m√°s rentable. ¬øQuiere decir esto que no se puede ser rentable si no se usa TDD? Claro que no, al igual que tambi√©n puedes ser un crack en el bloc de notas.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Los defensores de TDD tambi√©n debemos hacer auto-cr√≠tica y pensar en si la forma que elegimos para comunicar las bondades de TDD es la m√°s correcta.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;conclusi√≥n&#34;&gt;&lt;strong&gt;Conclusi√≥n&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Para mi su post de hoy ha sido una gran metedura de pata. Los unit testings aportan much√≠simo valor a la hora de detectar errores, y el TDD es una de las mejores herramientas para que nuestro dise√±o sea mejor.&lt;/p&gt;

&lt;p&gt;Yo no soy DHH. No he inventado Rails ni soy el CTO de &lt;a title=&#34;Basecamp&#34; href=&#34;https://basecamp.com/&#34; target=&#34;_blank&#34;&gt;una gran compa√±√≠a&lt;/a&gt;. Yo seguir√© utilizando TDD para que me ayude a hacer el mejor c√≥digo posible.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Caminante no hay camino, se hace camino al andar</title>
      <link>http://blog.armesto.net/caminante-no-hay-camino-se-hace-camino-al-andar/</link>
      <pubDate>Sun, 12 Jan 2014 17:54:18 +0000</pubDate>
      
      <guid>http://blog.armesto.net/caminante-no-hay-camino-se-hace-camino-al-andar/</guid>
      <description>&lt;p&gt;Llevo 3 a√±os ense√±ando buenas pr√°cticas en el desarrollo de software entre¬†&lt;a title=&#34;Softonic Internship&#34; href=&#34;http://careers.en.softonic.com/internship-program/&#34; target=&#34;_blank&#34;&gt;el internship de Softonic&lt;/a&gt;¬†y las colaboraciones espor√°dicas con la universidad, y algo que he aprendido de todo esto es que¬†&lt;strong&gt;es muy dif√≠cil&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Es dif√≠cil explicarle a alguien que la duplicaci√≥n es mala si no ha sufrido las consecuencias en sus carnes. Es complicado decirle que no abuse de la herencia entre clases si no se ha visto incapaz de cambiar su c√≥digo por culpa de esto.&lt;/p&gt;

&lt;p&gt;Es decir, podemos ense√±ar buenas pr√°cticas a estudiantes, decirles que hagan esto y aquello, o que eviten eso de all√≠, pero¬†&lt;strong&gt;no lo interiorizar√°n de verdad hasta que no vean claras las consecuencias&lt;/strong&gt;. Podemos explicarles los beneficios, los pros y los contras de una decisi√≥n y lo memorizar√°n. Pero no lo entender√°n del todo y lo dominar√°n hasta que no lo sufran y se digan a s√≠ mismos: ‚Äúmierda‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Igual que un piloto o un soldado pueden aprender su oficio con los libros o simuladores, no se convertir√°n en seniors en su profesi√≥n hasta que no lo hagan de verdad.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Para muchos, mantener una pieza de software durante un par de meses ser√° el tiempo m√°s largo que hayan tenido que mantener algo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;En¬†&lt;a title=&#34;Softonic Internship&#34; href=&#34;http://careers.en.softonic.com/internship-program/&#34; target=&#34;_blank&#34;&gt;el internship de Softonic&lt;/a&gt;¬†ense√±amos desarrollo de software durante 3 meses a estudiantes que est√©n terminando la carrera. Es un curso intensivo donde se ven muchas cosas. Es poco tiempo, pero para intentar que vayan ganando horas de vuelo, disparos en el campo de batalla, desde el principio tienen que desarrollar su propio framework desde cero. Y ese es el framework que utilizar√°n hasta el final del curso. Cuando nuevas funcionalidades se vayan pidiendo, ver√°n si ciertas decisiones que han tomado les han ayudado o perjudicado y cuan costoso es de modificar.&lt;/p&gt;

&lt;p&gt;Para muchos, mantener una pieza de software durante un par de meses ser√° el tiempo m√°s largo que hayan tenido que mantener algo.¬†&lt;strong&gt;Es en el mantenimiento donde se ponen de manifiesto los pros y los contras que se explican en la teor√≠a del curso&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Si us√°semos un framework open source existente o di√©semos una soluci√≥n igual para todos, se quedar√≠an sin aprender esto. Y creo que es primordial en el camino para convertirse en un programador senior. Porque son los seniors los que tienen suficientes horas de vuelo como para, con el libro en la mano, saber cuando pueden saltarse las reglas para hacer mejor software.&lt;/p&gt;

&lt;p&gt;Los libros, los v√≠deos y los cursos son recursos muy buenos para aprender a programar. Pero estos son solo la semilla para que luego podamos crecer.¬†&lt;strong&gt;No sirve de nada si no salimos ah√≠ fuera e intentamos solventar problemas reales&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;¬øQuieres aprender a programar? Construye algo que dure en el tiempo, comp√°rtelo con los dem√°s y util√≠zalo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>¬øQu√© es el versionamiento sem√°ntico y por qu√© es importante?</title>
      <link>http://blog.armesto.net/que-es-el-versionamiento-semantico-y-por-que-es-importante/</link>
      <pubDate>Sat, 23 Nov 2013 18:02:29 +0000</pubDate>
      
      <guid>http://blog.armesto.net/que-es-el-versionamiento-semantico-y-por-que-es-importante/</guid>
      <description>&lt;p&gt;Cuando decides utilizar un c√≥digo que no es tuyo como puede ser un framework o una librer√≠a, una de las cosas de las que tienes que preocuparte es de estar al d√≠a con las √∫ltimas versiones que vayan sacando. No solo porque quiz√° incluyan cosas que te puedan interesar, si no porque puede que la √∫ltima versi√≥n del framework en el que acabas de basar toda tu aplicaci√≥n no sea compatible con c√≥digo de versiones anteriores.&lt;/p&gt;

&lt;p&gt;Aqu√≠ nacen dos problemas del mundo del software. Uno, para el consumidor de ese c√≥digo, que necesita una forma de saber si la √∫ltima versi√≥n de una herramienta es un cambio absoluto del comportamiento o solo arregla unos fallos menores. Y dos, para el creador de c√≥digo, que necesita de una manera de comunicar a sus usuarios la naturaleza y el alcance de la √∫ltima versi√≥n que va a publicar.&lt;/p&gt;

&lt;p&gt;Para esto se invent√≥ lo que conocemos a d√≠a de hoy como¬†&lt;a title=&#34;Semantic Versioning&#34; href=&#34;http://semver.org/&#34; target=&#34;_blank&#34;&gt;versionamiento sem√°ntico, o semantic versioning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;distintos-tipos-de-versiones&#34;&gt;Distintos tipos de versiones&lt;/h2&gt;

&lt;p&gt;El versionamiento sem√°ntico es un convenio o est√°ndar a la hora de definir la versi√≥n de tu c√≥digo, dependiendo de la naturaleza del cambio que est√°s introduciendo. De tal forma, se identifican 3 tipos de cambios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Major&lt;/strong&gt;: Cambio dr√°stico en el software. No es compatible con c√≥digo hecho en versiones anteriores.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minor&lt;/strong&gt;: Cambio que a√±ade alguna caracter√≠stica nueva al software o modifica alguna ya existente, pero que sigue siendo compatible con c√≥digo existente. Tambi√©n cuando marcamos algo como obsoleto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Patch&lt;/strong&gt;: Cuando arreglamos un bug siendo el cambio retrocompatible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;De esta forma, tenemos un lenguaje com√∫n entre desarrolladores y consumidores a la hora de hablar de versiones.&lt;/p&gt;

&lt;h2 id=&#34;c√≥mo-se-marca-una-versi√≥n-como-major-minor-o-patch&#34;&gt;¬øC√≥mo se marca una versi√≥n como major, minor o patch?&lt;/h2&gt;

&lt;p&gt;Cada vez que enviemos c√≥digo al repositorio crearemos un nuevo tag siguiendo el convenio sem√°ntico, dependiendo de los cambios introducidos. El tag contendr√° la informaci√≥n, separando las versiones de cada tipo por puntos, de la forma&lt;strong&gt;major&lt;/strong&gt;.&lt;strong&gt;minor&lt;/strong&gt;.&lt;strong&gt;patch&lt;/strong&gt;. Esta versi√≥n en concreto, el tag que lo representa,¬†&lt;strong&gt;no puede ser cambiado jam√°s&lt;/strong&gt;, para que si alguien depende de esa versi√≥n en particular, pueda seguir haci√©ndolo sin problemas.&lt;/p&gt;

&lt;p&gt;Si el framework o librer√≠a que yo utilizo sigue el versionamiento sem√°ntico a rajatabla, s√© que¬†&lt;strong&gt;puedo actualizar sin miedo&lt;/strong&gt;¬†todos las versiones marcadas como patches o minor porque no romper√°n mi c√≥digo. Yo podr√≠a actualizar de la versi√≥n 5.3.3 a la 5.3.4 o incluso 5.4.0, porque solo estar√≠an incrementando las versiones minor y patch, que son compatibles con c√≥digo existente.&lt;/p&gt;

&lt;p&gt;Si por el contrario pasase de la versi√≥n 1.4 a la versi√≥n 2.0,¬†&lt;strong&gt;tendr√≠a que tener cuidado&lt;/strong&gt;¬†porque seguramente habr√≠a muchas cosas que dejar√≠an de funcionar: ha cambiado la major.&lt;/p&gt;

&lt;h2 id=&#34;identificadores-de-estabilidad&#34;&gt;Identificadores de estabilidad&lt;/h2&gt;

&lt;p&gt;Adem√°s de poder definir los cambios en el c√≥digo como major, minor o patch, se suelen a√±adir unos identificadores que ayudan a marcar versiones espec√≠ficas que quieres diferenciar,¬†&lt;strong&gt;indicando la estabilidad de esa versi√≥n&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Por ejemplo, tienes tu aplicaci√≥n a la versi√≥n 1.4.6 pero decides empezar el desarrollo de la pr√≥xima gran versi√≥n, la 2. Entonces los primeros desarrollos en esa versi√≥n nueva ir√°n a la 2.0.0, pero como todav√≠a est√°s empezando y probando cosas, podr√≠as ponerle un identificador que le dijese a la gente¬†&lt;strong&gt;la estabilidad de esa versi√≥n&lt;/strong&gt;. Tu versi√≥n quedar√≠a en algo como¬†&lt;strong&gt;2.0.0-alpha,&lt;/strong&gt;¬†por ejemplo, y la gente sabr√≠a que es una versi√≥n¬†_alpha_¬†no muy estable.&lt;/p&gt;

&lt;p&gt;Seg√∫n fueses avanzando en el desarrollo, llegar√≠as a una versi√≥n beta la cual marcar√≠as por ejemplo como¬†&lt;strong&gt;2.1.3-beta&lt;/strong&gt;. As√≠ hasta que todo estuviese listo para publicarse, y marcases una versi√≥n como candidata para ser publicada como¬†&lt;strong&gt;2.1.5-rc1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Si dos versiones iguales tienen distinto identificador, da igual:¬†&lt;strong&gt;se consideran iguales a todos los efectos&lt;/strong&gt;. Esto nos permite ir actualizando la estabilidad de una versi√≥n, pudi√©ndola pasar de¬†_alpha_¬†a¬†_beta_¬†o incluso a¬†&lt;em&gt;release candidate&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Tambi√©n por convenio, encontrar√°s otro identificador conocido como¬†&lt;strong&gt;dev-master&lt;/strong&gt;. Este identificador apunta a la √∫ltima revisi√≥n enviada al repositorio, que no tiene por qu√© ser la √∫ltima estable. Si dependes en esta versi√≥n estar√°s al d√≠a con todos los √∫ltimos cambios, pero te arriesgas a recibir cambios no retrocompatibles.&lt;/p&gt;

&lt;h2 id=&#34;conclusi√≥n&#34;&gt;Conclusi√≥n&lt;/h2&gt;

&lt;p&gt;El¬†&lt;a title=&#34;Semantic Versioning&#34; href=&#34;http://semver.org/lang/es/&#34; target=&#34;_blank&#34;&gt;versionamiento sem√°ntico&lt;/a&gt;¬†es un est√°ndar de facto y deber√≠as conocerlo. Si est√°s en el mundillo PHP,¬†&lt;a title=&#34;Composer&#34; href=&#34;http://getcomposer.org/&#34; target=&#34;_blank&#34;&gt;Composer&lt;/a&gt;¬†se basa en √©l: las dependencias que especificas en el archivo¬†_composer.json_¬†deber√≠an tener en cuenta lo visto en este art√≠culo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ni hombres lobo ni balas de plata</title>
      <link>http://blog.armesto.net/ni-hombres-lobo-ni-balas-de-plata/</link>
      <pubDate>Sat, 26 Oct 2013 17:56:47 +0000</pubDate>
      
      <guid>http://blog.armesto.net/ni-hombres-lobo-ni-balas-de-plata/</guid>
      <description>&lt;p&gt;Durante a√±os, programadores de todos los lenguajes han buscando sin descanso la respuesta a todos sus problemas. Una metodolog√≠a, un principio. Algo que termine de un plumazo con las complicaciones a la hora de programar. A esta respuesta se le llama com√∫nmente¬†&lt;strong&gt;la bala de plata&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Muchas veces es costoso tener que decidir si este principio es mejor que ese otro; o si es mejor aplicar tal patr√≥n de dise√±o en vez de otro distinto. Os suenan cosas como:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8211; Siempre tienes que tener 100% de code coverage.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8211; Nunca deber√≠as utilizar un ORM.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;La buena noticia que quiero compartir hoy contigo es que no tienes por qu√© elegir. No tiene sentido hacerlo. ‚ÄòX‚Äô no es mejor que ‚ÄòY.‚Äô Pero tampoco ‚ÄòY‚Äô es mejor que ‚ÄòX‚Äô.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;En la programaci√≥n todas las decisiones son un¬†&lt;strong&gt;&lt;em&gt;tradeoff&lt;/em&gt;&lt;/strong&gt;: hay pros y hay contras, y es tu responsabilidad conocerlas y decidir en consecuencia. No elegir algo porque alguien lo haya dicho, o peor a√∫n, porque s√≠.&lt;/p&gt;

&lt;p&gt;No esperes a que alguien te diga c√≥mo se resuelve algo. Preg√∫ntale qu√© ganas haci√©ndolo de esa forma, y a qu√© renuncias haci√©ndolo. Enti√©ndelo y entonces, solo entonces, decide.&lt;/p&gt;

&lt;p&gt;Somos vagos por naturaleza. Por eso seguimos a gur√∫s en Twitter que nos digan cu√°l es el mejor framework; evangelistas que nos confiesen cu√°l la mejor metodolog√≠a; o peor a√∫n, ninjas y jedis que nos ense√±en a usar la fuerza.&lt;/p&gt;

&lt;p&gt;Como buen gallego, para m√≠ la respuesta a todo este tipo de preguntas es siempre la misma.&lt;/p&gt;

&lt;p&gt;¬øDeber√≠a utilizar siempre Domain Driven Design? Depende.&lt;/p&gt;

&lt;p&gt;¬øDeber√≠a testear m√©todos privados o protegidos en mis tests? Por regla general no, pero depende.&lt;/p&gt;

&lt;p&gt;¬øDeber√≠a hacer TDD siempre? Depende.&lt;/p&gt;

&lt;p&gt;Es muy f√°cil generalizar. Es como el te√≥rico del carnet de conducir: decir SIEMPRE o NUNCA¬†&lt;strong&gt;es muy arriesgado&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Divulgadores como¬†&lt;a title=&#34;Robert C. Martin&#34; href=&#34;https://twitter.com/unclebobmartin&#34; target=&#34;_blank&#34;&gt;Robert C. Martin&lt;/a&gt;, a trav√©s de su mensaje al m√°s puro estilo predicador cat√≥lico americano, consiguen que muchas veces tomemos su mensaje como leyes absolutas indiscutibles que deben aplicarse siempre. Como balas de plata.&lt;/p&gt;

&lt;p&gt;En el caso de Robert C. Martin, es curioso como el mayor defensor del Test Driven Development ha tenido que escribir¬†&lt;a title=&#34;The Pragmatics of TDD&#34; href=&#34;http://blog.8thlight.com/uncle-bob/2013/03/06/ThePragmaticsOfTDD.html&#34; target=&#34;_blank&#34;&gt;un post explicando los casos en los que no lo utiliza&lt;/a&gt;. Y no hay ning√∫n problema con ello.&lt;/p&gt;

&lt;p&gt;El problema es poner el piloto autom√°tico aplicando todo lo que se consideran buenas pr√°cticas sin pararse a pensar si lo es para el problema concreto que tienes delante. Pero claro,¬†&lt;strong&gt;nos es mucho m√°s c√≥modo seguir unas reglas que otros nos dan, antes que pensar&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Cosas tan aparentemente inocentes como el¬†&lt;a title=&#34;Don&#39;t Repeat Yourself&#34; href=&#34;http://c2.com/cgi/wiki?DontRepeatYourself&#34; target=&#34;_blank&#34;&gt;DRY (Don‚Äôt Repeat Yourself)&lt;/a&gt;, pueden tener malas consecuencias si lo aplicas ciegamente.&lt;/p&gt;

&lt;p&gt;Los √∫nicos principios que pueden parecer infalibles son los principios SOLID, pero he llegado a encontrarme casos donde la ‚ÄúDependency Inversion‚Äù hab√≠a alcanzado un nivel de locura que no era normal. Como cuando aprendes un patr√≥n de dise√±o nuevo e intentas aplicarlo PARA TODO.&lt;/p&gt;

&lt;p&gt;En definitiva: por mucho que nos cueste, todav√≠a tenemos que seguir pensando. Aprendamos qu√© beneficios y desventajas tiene cada pr√°ctica y decidamos. No busquemos balas de plata.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sin refactoring no es TDD</title>
      <link>http://blog.armesto.net/sin-refactoring-no-es-tdd/</link>
      <pubDate>Fri, 11 Oct 2013 17:57:56 +0000</pubDate>
      
      <guid>http://blog.armesto.net/sin-refactoring-no-es-tdd/</guid>
      <description>&lt;p&gt;Parece evidente, ¬øverdad? Cuando explicas¬†&lt;a title=&#34;TDD&#34; href=&#34;http://c2.com/cgi/wiki?TestDrivenDevelopment&#34; target=&#34;_blank&#34;&gt;TDD (Test Driven Development)&lt;/a&gt;, explicas que tiene 3 fases: rojo, verde y refactoring. Sin embargo, parece que son las 2 primeras las que entran con mayor facilidad en la mente del programador.&lt;/p&gt;

&lt;p&gt;Presentas la kata y all√≠ van disparados a escribir su primer test para estar en rojo. Una vez all√≠,¬†_baby step_¬†en el c√≥digo con lo m√≠nimo indispensable para pasar el test y ponernos en verde. Es entonces cuando deber√≠amos pensar en el refactoring, pero normalmente es dif√≠cil encontrar cosas a refactorizar en nuestro (poquito) c√≥digo en las primeras iteraciones, as√≠ que pasamos a rojo otra vez escribiendo un nuevo test.&lt;/p&gt;

&lt;p&gt;Este proceso se repite de forma r√°pida durante los primeros tests, y con la excusa de que con pocos tests es dif√≠cil encontrar duplicaciones o cosas a mejorar en el c√≥digo que hace pasar estos tests, poco a poco entramos en el modo sem√°rofo del rojo-verde.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Los m√°s aventajados del lugar se aventuran a mejorar alguna cosilla cuando est√°n en verde, pero suele ser alg√∫n cambio peque√±o sin importancia, mientras la casu√≠stica de if‚Äôs y else‚Äôs sigue creciendo sin que nadie haga nada por evitarlo. Se olvidan los principios¬†&lt;a title=&#34;SOLID&#34; href=&#34;http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod&#34; target=&#34;_blank&#34;&gt;SOLID&lt;/a&gt;, como si fuesen principios te√≥ricos que poco o nada tienen que ver con la pr√°ctica. ‚ÄúLa teor√≠a no es lo m√≠o, yo soy m√°s pr√°ctico‚Äù: ¬øos suena?&lt;/p&gt;

&lt;p&gt;Como facilitador, solo te queda realizar las preguntas adecuadas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;¬øsi quiero ampliar el funcionamiento con una¬†&lt;strong&gt;nueva&lt;/strong&gt;¬†regla de negocio, tendr√© que cambiar mi clase? ¬øc√≥mo de¬†&lt;strong&gt;costoso&lt;/strong&gt;¬†ser√° el cambio?&lt;/li&gt;
&lt;li&gt;¬øest√° ese comportamiento bien¬†&lt;strong&gt;encapsulado&lt;/strong&gt;? ¬øhay suficiente¬†&lt;strong&gt;abstracci√≥n&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;¬øhace esta clase una y solo una cosa?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Es sobretodo con la primera pregunta con la que la gente se da cuenta de los problemas de su dise√±o actual, quiz√° porque es la pregunta m√°s ‚Äúpr√°ctica‚Äù, por as√≠ decirlo. En el fondo son los mismos principios, pero forzando a la gente a pensar en un caso pr√°ctico, por ejemplo dando t√∫ mismo nuevas e imprevistas reglas de negocio, la gente entiende por qu√© es mejor seguir¬†&lt;a title=&#34;SOLID&#34; href=&#34;http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod&#34; target=&#34;_blank&#34;&gt;SOLID&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Estas preguntas hay que realizarlas desde muy temprano. Si la gente va posponiendo el refactoring, cada vez es m√°s dif√≠cil cambiar el dise√±o actual porque cada vez habr√° m√°s reglas de negocio en el c√≥digo, y cada vez habr√° m√°s tests que quiz√° haya que retocar, si el refactoring m√°s que un simple refactoring.&lt;/p&gt;

&lt;p&gt;Tambi√©n se tiende a olvidar que en ese momento tenemos un conocimiento grande del dominio, y podemos plasmar las reglas del dominio de una forma que ahora entendemos, pero quiz√° no entendamos en el futuro. Justo ahora es el mejor momento para dar nombres que expresen la intenci√≥n del c√≥digo. Por ejemplo: introducir condiciones en m√©todos o variables con nombres expresivos.&lt;/p&gt;

&lt;p&gt;Una de las grandes ventajas del TDD, es que el refactoring est√° dentro del ciclo de desarrollo. Si no lo hacemos frecuentemente, se pierde el efecto.&lt;/p&gt;

&lt;p&gt;Sin refactoring no es TDD.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>